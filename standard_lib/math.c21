square = proc (value : int) int {

    return value * value;
};

square_float = proc (value : f) float {

    return value * value;
};

power = proc (value : int, exponent : int) int {

    i := 0;
    while (i < exponent) {

        value = value * value;
        i = i + 1;
    }

    return value;
};

power_float = proc (value : float, exponent : int) int {

    i := 0;
    while (i < exponent) {

        value = value * value;
        i = i + 1;
    }

    return value;
};

absolute = proc (value : int) int {

    if (value < 0) return value  * -1;
    return value;
};

absolute_float = proc (value : float) float {

    if (value < .) value * -1.;
    return value;
};

cube = proc (value : int) int {

    return value * value * value;
};

cube_float = proc (value : float) float {

    return value * value * value;
};

ceiling = proc (value : float) int {

    if (value >= . && value > float(int(value))) return int(value) + 1;
    return int(value);
};

floor = proc (value : float) int {

    if (value < . && float(int(value)) > value) return int(value) - 1;
    return int(value);
};

# this one is retarded and will have to be redone
round = proc (value : float) int {

    if (value < . || value < float(int(value)) + .5) return int(value);
    return int(value) + 1;
};

maximum = proc (a : int, b : int) int {

    if (a > b) return a;
    return b;
};

maximum_float = proc (a : float, b : float) float {

    if (a > b) return a;
    return b;
};

minimum = proc (a : int, b : int) int {

    if (a < b) return a;
    return b;
};

minimum_float = proc (a : float, b : float) float {

    if (a < b) return a;
    return b;
};

tau = proc () float { return 6.2831853071795862; };

pi = proc () float { return 3.1415926535897931; };

e = proc () float { return 2.7182818284590451; };

factorial := proc (n : int) int {

    if (!n) return 1;
    else return n * factorial(n - 1);
};

sqrt := proc (n: float) float {
    x := 1.0;
    iter := 100;
    while (iter) {
        x = x - ((x * x)-n)/(x*2.0);
        iter = iter - 1;
    }
    return x;
};

fib := proc(n: int) int {
    if (n < 2) {
        return n;
    }

    return fib(n - 1) + fib(n - 2);
};
