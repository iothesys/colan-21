square :: proc (value : int) int {

    return value * value;
}

square_float :: proc (value : float) float {

    return value * value;
}

power :: proc (value : int, exponent : int) int {

    i := 0;
    while (i < exponent) {

        value = value * value;
        i = i + 1;
    }

    return value;
}

power_float :: proc (value : float, exponent : int) int {

    i := 0;
    while (i < exponent) {

        value = value * value;
        i = i + 1;
    }

    return value;
}

absolute :: proc (value : int) int {

    if (value < 0) return value  * -1;
    return value;
}

absolute_float :: proc (value : float) float {

    if (value < .) return value * -1.;
    return value;
}

cube :: proc (value : int) int {

    return value * value * value;
}

cube_float :: proc (value : float) float {

    return value * value * value;
}

ceiling :: proc (value : float) int {

    if (value >= . && value > float(int(value))) return int(value) + 1;
    return int(value);
}

floor :: proc (value : float) int {

    if (value < . && float(int(value)) > value) return int(value) - 1;
    return int(value);
}

round :: proc (value : float) int {

    if (value < . || value < float(int(value)) + .5) return int(value);
    return int(value) + 1;
}

maximum :: proc (a : int, b : int) int {

    if (a > b) return a;
    return b;
}

maximum_float :: proc (a : float, b : float) float {

    if (a > b) return a;
    return b;
}

minimum :: proc (a : int, b : int) int {

    if (a < b) return a;
    return b;
}

minimum_float :: proc (a : float, b : float) float {

    if (a < b) return a;
    return b;
}

tau := 6.2831853071795862;

pi := 3.1415926535897931;

e := 2.7182818284590451;

factorial :: proc (n : int) int {

    if (!n) return 1;
    else return n * factorial(n - 1);
}

sqrt :: proc (n: float) float {
    x := 1.0;
    iter := 100;
    while (iter) {
        x = x - ((x * x)-n)/(x*2.0);
        iter = iter - 1;
    }
    return x;
}

fib ::(n: int) int {
    if (n < 2) {
        return n;
    }

    return fib(n - 1) + fib(n - 2);
}

average :: proc (values : :float) float {

    count := len(values);
    i = 0;
    result := .;

    while (i < count) {

        result = result + values{i}
        i = i + 1;
    }

    return result / float(count);
}

# For now, the responsibility of sorting the values is the
# burden of the user, however I'll have to do that myself eventually.
median :: proc (values : :float) float {

    count := len(values);

    # odd
    if (count % 2) {

        return values{round(float(count) / 2. - 1.)}
    }

    # even
    return (values{count / 2 - 1} + values{count / 2}) / 2.;
}

binomial_coefficient :: proc (n : int, k : int) int {

    if (k < 0 || k > n) return 0;
    if (!k || k == n) return 1;

    k = minimum(k, n - k);
    result = 1;
    i = 0;

    while (i < k) {

        result = result * (n - i) / (i + 1);
        i = i + 1;
    }

    return result;
}
